#BlueJ class context
comment0.target=testDeck
comment0.text=\r\n\ The\ test\ class\ testDeck.\r\n\r\n\ @Jessie\ McColm\ and\ Lucia\ Adams\r\n
comment1.params=
comment1.target=testDeck()
comment1.text=\r\n\ Default\ constructor\ for\ test\ class\ testDeck\r\n
comment10.params=
comment10.target=void\ testIsNonEmptyDeckEmpty()
comment10.text=\r\n\ Tests\ that\ when\ you\ call\ isDeckEmpty\ on\ a\ deck\ that\ isn't\r\n\ empty\ (has\ at\ least\ one\ card\ in\ it)\ it\ returns\ false\r\n
comment11.params=
comment11.target=void\ testIsEmptyDeckEmpty()
comment11.text=\r\n\ Tests\ that\ when\ you\ call\ isDeckEmpty\ on\ a\ deck\ that\ is\ empty\r\n\ (no\ cards\ in\ it)\ it\ returns\ true\r\n
comment12.params=
comment12.target=void\ testIsNonFullDeckFull()
comment12.text=\r\n\ Tests\ that\ when\ you\ call\ isDeckFull\ on\ a\ deck\ that\ isn't\ full\r\n\ (has\ less\ than\ 4\ cards\ in\ it)\ it\ returns\ false\r\n
comment13.params=
comment13.target=void\ testIsFullDeckFull()
comment13.text=\r\n\ Tests\ that\ when\ you\ call\ isDeckFull\ on\ a\ deck\ that\ is\ full\r\n\ (has\ at\ least\ 4\ cards\ in\ it)\ it\ returns\ true\r\n
comment14.params=
comment14.target=void\ testBigDeckIsTooBig()
comment14.text=\r\n\ Tests\ that\ when\ you\ call\ isDeckTooBig\ on\ a\ deck\ that\ is\ too\ big\r\n\ (has\ more\ than\ 4\ cards\ in\ it)\ it\ returns\ true\r\n
comment15.params=
comment15.target=void\ testSmallDeckIsTooBig()
comment15.text=\r\n\ Tests\ that\ when\ you\ call\ isDeckTooBig\ on\ a\ deck\ that\ is\ not\ too\ big\r\n\ (does\ not\ have\ more\ than\ 4\ cards\ in\ it)\ it\ returns\ true\r\n
comment16.params=
comment16.target=void\ tearDown()
comment16.text=\r\n\ Tears\ down\ the\ test\ fixture.\ Need\ to\ delete\ any\ deck\ output\ files\ created\r\n\r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment3.params=
comment3.target=void\ testGetDeckID()
comment3.text=\r\n\ Tests\ that\ when\ a\ deck\ is\ created\ with\ a\ specific\ ID,\ getDeckID()\r\n\ returns\ the\ expected\ value\r\n\r\n
comment4.params=
comment4.target=void\ testAddCard()
comment4.text=\r\n\ Tests\ that\ you\ can\ add\ a\ card\ to\ a\ deck\ and\ when\ you\ call\ getCardList\ it\r\n\ contains\ that\ card\ object\r\n\r\n
comment5.params=
comment5.target=void\ testRemoveCard()
comment5.text=\r\n\ Tests\ that\ you\ can\ add\ a\ card\ to\ deck\ and\ when\ you\ call\ removeCard()\r\n\ it\ returns\ that\ card\ object\r\n\r\n
comment6.params=
comment6.target=void\ testRemoveCardOrdering()
comment6.text=\r\n\ Tests\ that\ you\ can\ add\ card,\ to\ deck\ and\ when\ you\ call\ removeCard()\r\n\ it\ returns\ those\ card\ objects\ in\ the\ expected\ order\ (first\ Card\ to\ be\ added\r\n\ is\ also\ the\ first\ card\ to\ be\ removed\r\n
comment7.params=
comment7.target=void\ testGetCardListOrdering()
comment7.text=\r\n\ Tests\ that\ the\ order\ of\ how\ the\ Cards\ are\ added\ to\ and\ stored\ in\ cardList\r\n\ is\ as\ expected\ (first\ to\ be\ added\ \=\ first\ in\ list)\r\n
comment8.params=
comment8.target=void\ testGetCardListOrderingIsNot()
comment8.text=\r\n\ Tests\ that\ the\ order\ of\ how\ the\ Cards\ are\ added\ to\ and\ stored\ in\r\n\ cardList\ is\ not\ something\ we\ don't\ expect\ (first\ to\ be\ added\ \!\=\ last\ in\ list)\r\n
comment9.params=
comment9.target=void\ testEndGame()
comment9.text=\r\n\ Tests\ that\ the\ output\ to\ the\ deck\ file\ when\ endGame()\ is\ called\ is\r\n\ what\ we\ expect\ when\ we\ set\ up\ a\ deck\ with\ cards\ of\ specific\ values\ in\ it\r\n
numComments=17
