#BlueJ class context
comment0.target=testPlayer
comment0.text=\r\n\ The\ test\ class\ testPlayer.\r\n\r\n\ @Jessie\ McColm\ and\ Lucia\ Adams\r\n
comment1.params=
comment1.target=testPlayer()
comment1.text=\r\n\ Default\ constructor\ for\ test\ class\ testPlayer\r\n
comment10.params=
comment10.target=void\ testPickAndDropWithRandomness()
comment10.text=\r\n\ Tests\ that\ a\ player\ picks\ up\ the\ correct\ card\ from\ the\ correct\ pack,\r\n\ that\ a\ player\ drops\ one\ of\ the\ possible\ correct\ cards\ to\ the\ correct\ pack,\r\n\ and\ that\ the\ player's\ hand\ after\ this\ is\ one\ of\ the\ 2\ hands\ possible.\r\n\ Tests\ this\ by\ checking\ that\ the\ player\ output\ file\ is\ what\ we\ expect.\r\n\ An\ exception\ needs\ to\ be\ throwable\ due\ to\ the\ use\ of\ reflection,\r\n\ but\ it\ shouldn't\ occur\ because\ we\ know\ a\ method\ with\ that\ name\ exists\r\n
comment11.params=
comment11.target=void\ testPickAndDropWithRandomnessDoesNotDropMatchingCards()
comment11.text=\r\n\ Tests\ that\ a\ player\ does\ not\ drop\ a\ card\ that\ matches\ their\ playerID.\r\n\ Tests\ this\ by\ checking\ that\ the\ player\ output\ file\ is\ what\ we\ expect.\r\n\ An\ exception\ needs\ to\ be\ throwable\ due\ to\ the\ use\ of\ reflection,\r\n\ but\ it\ shouldn't\ occur\ because\ we\ know\ a\ method\ with\ that\ name\ exists\r\n
comment12.params=
comment12.target=void\ testWin()
comment12.text=\r\n\ Tests\ that\ the\ win()\ method\ writes\ the\ expected\ output\ to\ the\ expected\r\n\ player\ output\ file.\ We\ set\ up\ a\ player\ with\ specific\ cards\ and\ expect\ these\r\n\ to\ be\ correctly\ detailed\ in\ the\ output.\ This\ method\ also\ tests\r\n\ endGame,\ as\ endGame\ is\ called\ in\ win()\r\n\ If\ an\ error\ occurs\ in\ the\ file\ reading\ stage,\ the\ test\ fails\r\n
comment13.params=
comment13.target=void\ testLoss()
comment13.text=\r\n\ Tests\ that\ the\ loss()\ method\ writes\ the\ expected\ output\ to\ the\ expected\r\n\ player\ output\ file.\ We\ set\ up\ a\ player\ with\ specific\ cards\ and\ expect\ these\r\n\ to\ be\ correctly\ detailed\ in\ the\ output.\ We\ also\ specify\ a\ winning\ player,\r\n\ and\ also\ expect\ to\ see\ this\ reflected\ in\ the\ output.\ This\ method\ also\r\n\ tests\ endGame,\ as\ endGame\ is\ called\ in\ loss()\r\n\ If\ an\ error\ occurs\ in\ the\ file\ reading\ stage,\ the\ test\ fails\r\n
comment14.params=
comment14.target=void\ testGetHand()
comment14.text=\r\n\ Tests\ that\ when\ you\ create\ a\ player,\ you\ can\ add\ cards\ to\ their\ cardList,\r\n\ and\ getHand()\ will\ return\ the\ cards\ in\ the\ expected\ order\r\n
comment15.params=
comment15.target=void\ testCheckVictoryWhenHasTooFewCards()
comment15.text=\r\n\ Tests\ that\ when\ you\ add\ 3\ matching\ cards\ to\ a\ Player\r\n\ (so\ that\ they\ are\ in\ a\ state\ where\ they\ shouldn't\ win\ the\ game)\r\n\ calling\ checkVictory\ will\ return\ false\r\n
comment16.params=
comment16.target=void\ testCheckVictoryWhenHasTooManyCards()
comment16.text=\r\n\ Tests\ that\ when\ you\ add\ 5\ matching\ cards\ to\ a\ Player\ (so\ that\ they\ are\r\n\ in\ a\ state\ where\ they\ shouldn't\ win\ the\ game)\ calling\ checkVictory\ will\r\n\ return\ false\r\n
comment17.params=
comment17.target=void\ testKill()
comment17.text=\r\n\ Tests\ that\ when\ you\ call\ kill()\ on\ a\ player\ the\ run()\ method\ is\ able\r\n\ to\ return\ and\ the\ execution\ can\ pass\ to\ the\ line\ of\ code\ making\ the\r\n\ test\ pass\r\n
comment18.params=
comment18.target=void\ tearDown()
comment18.text=\r\n\ Tears\ down\ the\ test\ fixture.\ Deletes\ player1_output\ file\ so\ it\r\n\ can\ be\ writted\ to\ and\ used\ in\ different\ test\r\n\r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment3.params=
comment3.target=void\ testGetPlayerID()
comment3.text=\r\n\ Tests\ that\ when\ you\ create\ a\ player\ with\ a\ specific\ ID,\r\n\ getPlayerID\ will\ return\ that\ ID\r\n
comment4.params=
comment4.target=void\ testFalseGetPlayerID()
comment4.text=\r\n\ Tests\ that\ when\ you\ create\ a\ player\ with\ a\ specific\ ID,\ getPlayerID\ will\r\n\ not\ return\ something\ that\ isn't\ that\ ID\r\n
comment5.params=
comment5.target=void\ testAddCard()
comment5.text=\r\n\ Tests\ that\ when\ you\ create\ a\ player,\ you\ can\ add\ a\ card\ to\ their\r\n\ cardList,\ and\ getHand()\ will\ return\ that\ card\r\n
comment6.params=
comment6.target=void\ testFalseAddCard()
comment6.text=\r\n\ Tests\ that\ when\ you\ create\ a\ player,\ you\ can\ add\ a\ card\ to\ their\ cardList,\r\n\ and\ getHand()\ will\ not\ return\ somthing\ that\ isn't\ that\ card\r\n
comment7.params=
comment7.target=void\ testCheckVictoryWhenWinner()
comment7.text=\r\n\ Tests\ that\ when\ you\ add\ 4\ matching\ cards\ to\ a\ Player\r\n\ (so\ that\ they\ are\ in\ a\ state\ where\ they\ should\ win\ the\ game)\r\n\ calling\ checkVictory\ will\ return\ true\r\n
comment8.params=
comment8.target=void\ testCheckVictoryWhenNotWinner()
comment8.text=\r\n\ Tests\ that\ when\ you\ add\ 4\ non\ matching\ cards\ to\ a\ Player\r\n\ (so\ that\ they\ are\ in\ a\ state\ where\ they\ shouldn't\ win\ the\ game)\r\n\ calling\ checkVictory\ will\ return\ false\r\n
comment9.params=
comment9.target=void\ testPickAndDrop()
comment9.text=\r\n\ Tests\ that\ a\ player\ picks\ up\ the\ correct\ card\ from\ the\ correct\ pack,\r\n\ that\ a\ player\ drops\ the\ correct\ card\ to\ the\ correct\ pack,\r\n\ and\ that\ the\ player's\ hand\ after\ this\ is\ what\ we\ expect.\r\n\ Tests\ this\ by\ checking\ that\ the\ player\ output\ file\ is\ what\ we\ expect.\r\n\ An\ exception\ needs\ to\ be\ throwable\ due\ to\ the\ use\ of\ reflection,\r\n\ but\ it\ shouldn't\ occur\ because\ we\ know\ a\ method\ with\ that\ name\ exists\r\n
numComments=19
